extends layout

block content
  div#titleContainer
    h1 
      | Live stock tracker
  // TODO change values to today and a year ago from today
  div#datePickerContainer
    | From
    input( type="text" id="datePickerStart")
    | To
    input( type="text" id="datePickerEnd")
  canvas#mainChart
  // TODO change legend to html and place a button to remove from display and a button to remove dataset
  div#legend
  
  div#addStockContainer
    div#nasdaqContainer
      h3 
        | Search stock
      form#nasdaqForm
        input( type="text" id="nasdaqQuery" placeholder="Stock Code" required )
        input( type="submit" value="Add" )

  p#footer
    | *built by 
    a(href="https://twitter.com/Demiacle") Daniel Escobedo
    |  using 
    a(href="https://www.npmjs.com/package/google-finance") google-finance 
    | and 
    a(href="https://github.com/dbushell/Pikaday") Pikaday
  

  // *****SCRIPTS*****
  script(src="/javascripts/initializeChart.js")
  script(src="")
  script.
    Chart.defaults.LineWithLine = Chart.defaults.line;
    Chart.controllers.LineWithLine = Chart.controllers.line.extend({
      draw: function(ease) {
          Chart.controllers.line.prototype.draw.call(this, ease);

          if (this.chart.tooltip._active && this.chart.tooltip._active.length) {
            var activePoint = this.chart.tooltip._active[0],
                ctx = this.chart.ctx,
                x = activePoint.tooltipPosition().x,
                topY = this.chart.scales['y-axis-0'].top,
                bottomY = this.chart.scales['y-axis-0'].bottom;

            // draw line
            ctx.save();
            ctx.beginPath();
            ctx.moveTo(x, topY);
            ctx.lineTo(x, bottomY);
            ctx.lineWidth = 1;
            ctx.strokeStyle = '#07C';
            ctx.stroke();
            ctx.restore();
          }
      }
    });
    // '!{variable}' renders a pug unescaped string
    var stocks = JSON.parse( '!{stocks}' )
    var xAxis = stocks[0].dataset.map(i=>{
      return i.date.substring(0,10);
    });
    var niceColors = [
      'rgb(130, 50, 60)',
      'rgb(0, 99, 132)',
      'rgb(100, 200, 100)',
      'rgb(230, 230, 0)',
      'rgb( 0, 150, 230)',
      'rgb(255, 199, 132)',
      'rgb(230, 0, 232)',
      'rgb(140, 250, 150)',
      'rgb(50, 250, 250)',
      'rgb(250, 0, 0)'
    ];
    var startDate = xAxis[0];
    var endDate = xAxis[ xAxis.length - 1 ];

    var datasets = stocks.map( buildNewDataset );
    console.log(datasets)
    function buildNewDataset( data ){
      var color = getNewColor();
      return {
        label: data.stock,
        lineTension: 0,
        borderWidth: 1,
        pointRadius: 0,
        backgroundColor: color,
        borderColor: color,
        data: data.dataset.map( i=>{ return i.close }),
        fill: false
      }
    }
    function getNewColor(){
      return niceColors.pop();
    }
    function releaseColor( color ){
      niceColors.push( color );
    }
    var chart;
    function initializeChart( data ){
      var ctx = document.getElementById('mainChart').getContext('2d');
      chart = new Chart(ctx, {
        type: 'LineWithLine',
        data: {
          labels: xAxis, // x axis
          datasets: datasets
        },

        // Configuration options go here
        options: {
          legendCallback: buildCustomLegend,
          responsive: false,
          legend: {
            display: false
          },
          tooltips: {
            intersect: false,
            mode: 'index'
          },
          scales: {
            yAxes: [{
              ticks: {
                beginAtZero: true
              }
            }]
          }
        }
      });

      updateLegend( chart )
    }

    function updateLegend( chart ){
      document.getElementById('legend').innerHTML = chart.generateLegend();
    }

    function buildCustomLegend(chart){
      var html = '';
      chart.legend.legendItems.forEach( i=> {
        html += `<div class="legendColor" style="background-color:${i.fillStyle};"></div>`;
        html += `<p class="legendText">${i.text}</p>`;
        html += `<span class="removeStock" onclick="requestRemoveStock('${i.text}')">x</span>`;
      })
      
      return html;
    }

    initializeChart();
    
    function addDataToChart( data ){
      chart.data.datasets.push( buildNewDataset( data, chart.data.datasets.length ) )
      chart.update();
      updateLegend( chart )
    }
    function removeDataFromChart( stockID ){
      for( var j = chart.data.datasets.length - 1; j >= 0; j-- ){
        if(  chart.data.datasets[j].label == stockID){
          releaseColor( chart.data.datasets[j].backgroundColor )
          chart.data.datasets.splice( j, 1 );
        }
      }
      chart.update();
      updateLegend( chart );
    }

    document.getElementById('nasdaqForm').addEventListener('submit', event => {
      event.preventDefault();
      requestAddStock( document.getElementById('nasdaqQuery').value )
    });
    function requestAddStock( stockID ){
      console.log(stockID)
      ws.send( JSON.stringify( { 
        type: 'add',
        stockID: stockID 
      }));
    }
    function requestRemoveStock( stockID ){
      ws.send( JSON.stringify( { 
        type: 'remove',
        stockID: stockID 
      }));
    }
    
    var toString = (date, format) => {
        const day = date.getDate();
        const month = date.getMonth() + 1;
        const year = date.getFullYear();
        return `${year}-${month}-${day}`
    }
    var parse = (dateString, format) => {
        const parts = dateString.split('-');
        const day = parseInt(parts[0], 10);
        const month = parseInt(parts[1] - 1, 10);
        const year = parseInt(parts[1], 10);
        return new Date(year, month, day);
    }
    var pickerStart = new Pikaday({ field: document.getElementById('datePickerStart'), format: 'YYYY-M-D', toString, parse})
    var pickerEnd = new Pikaday({ field: document.getElementById('datePickerEnd'), format: 'YYYY-M-D', toString, parse})
    pickerStart.setDate( startDate )
    pickerEnd.setDate( endDate )

    var ws = new WebSocket('ws://localhost:8080'); // TODO change to pug variable of webiste 
    ws.onmessage = function (event) {
      var response = JSON.parse( event.data )
      console.log( response )
      if( response.type == 'remove' ){
        removeDataFromChart( response.stockID );
      }
      if( response.type == 'add' ){
        addDataToChart( response.data )
      }
      if ( response.type == 'fail') {
        // TODO place into a nice html element
        alert( response.messege )
      }
    };
